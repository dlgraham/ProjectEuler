import projectEuler.MyBigInteger;

public class FactorialDigitSum
{
	public static void main(String[] args)
	{
		MyBigInteger integer = new MyBigInteger(100);
		for(int i = 99; i > 0; i--)
		{
			integer.multiply(i);
		}
		System.out.println(integer);
		System.out.println(integer.addDigits());
	}
}
package projectEuler;

import java.util.Vector;

public class MyBigInteger
{
	Vector<Integer> number = new Vector<Integer>();
	
	public MyBigInteger(int num)
	{
		while(num > 0)
		{
			number.add(num % 10);
			num /= 10;
		}
	}
	
	public String toString()
	{
		String fullNumber = "";
		for(int i = 0; i < number.size(); i++)
		{
			fullNumber = number.get(i) + fullNumber;
		}
		return fullNumber;
	}
	
	public void multiply(int num)
	{
		for(int i = 0; i < number.size(); i++)
		{
			number.set(i, number.get(i) * num);
		}
		for(int i = 0; i < number.size(); i++)
		{
			if(number.get(i) >= 10 && i != number.size() - 1)
			{
				number.set(i + 1, number.get(i+1) + number.get(i) / 10);
				number.set(i, number.get(i) % 10);
			}
			else if(number.get(i) >= 10)
			{
				number.add(number.get(i) / 10);
				number.set(i, number.get(i) % 10);
			}
		}
	}
	
	public int addDigits()
	{
		int sum = 0;
		for(int i = 0; i < number.size(); i++)
		{
			sum += number.get(i);
		}
		return sum;
	}
}
