
import java.util.Collections;
import java.util.Vector;

public class SubStringDivisibility
{
	public static void main(String[] args)
	{
		final int SIZE = 10;
		Vector<Integer> number = new Vector<Integer>();
		for(int i = 0; i < SIZE; i++)
		{
			number.add(i);
		}
		int solved = 0;
		int k = 0;
		int l;
		int reverse;
		long sum = 0;
		
		while (solved != -1)
		{
			
			if((number.get(1) * 100 + number.get(2) * 10 + number.get(3)) % 2 == 0)
			{
				if((number.get(2) * 100 + number.get(3) * 10 + number.get(4)) % 3 == 0)
				{
					if((number.get(3) * 100 + number.get(4) * 10 + number.get(5)) % 5 == 0)
					{
						if((number.get(4) * 100 + number.get(5) * 10 + number.get(6)) % 7 == 0)
						{
							if((number.get(5) * 100 + number.get(6) * 10 + number.get(7)) % 11 == 0)
							{
								if((number.get(6) * 100 + number.get(7) * 10 + number.get(8)) % 13 == 0)
								{
									if((number.get(7) * 100 + number.get(8) * 10 + number.get(9)) % 17 == 0)
									{
										long tempNum = 0;
										for(int i = 0; i < SIZE; i++)
										{
											tempNum = tempNum * 10 + number.get(i);
										}
										sum += tempNum;
									}
								}
							}
						}
					}
				}
			}
			
			solved = SIZE - 2;
			boolean found = false;
			while(solved > - 1 && found == false)
			{
				//System.out.println(number);
				if(number.get(solved) < number.get(solved + 1))
				{
					found = true;
				}
				else
				{
					solved--;
				}
			}
			if(solved != -1)
			{
				k = solved;
				l = SIZE - 1;
				while(number.get(l) < number.get(k))
				{
					l--;
				}
				Collections.swap(number, k, l);
				reverse = SIZE - 1;
				for(int i = k + 1; i < reverse; i++)
				{
					Collections.swap(number, i, reverse);
					reverse--;
				}
			}
		}
		System.out.println(sum);
	}
}
