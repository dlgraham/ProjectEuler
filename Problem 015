//Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.


//How many such routes are there through a 20×20 grid?

//to solve the lattice path problem, turn the square 45 degrees sideways and start at the diamond's left corner with a one
//
//  1
//
//go right and add together the previous column that touches the element

//           1
//       1       3
//   1       2       6
//       1       3
//           1
// as the problem states, a 2x2 grid (with 3x3 corners) will have 6 solutions
//the solution so this problem uses an array expanded to 21x21 corners (20x20 grid)
// and prints out the grid to view the solution





import java.text.DecimalFormat;

public class LatticePaths
{
	public static void main(String[] args)
	{
		int num = 21;
		long[][] lattice = new long[num][num * 2 - 1];
		lattice[0][0] = 1;
		for (int j = 1; j < num * 2 - 1; j++)
		{
			if (j < num)
			{
				for (int i = 0; i < num; i++)
				{
					if(i == 0)
					{
						lattice[i][j] = 1;
					}
					else if (i == j)
					{
						lattice[i][j] = 1;
					}
					else
					{
						lattice[i][j] = lattice[i][j - 1] + lattice[i - 1][j - 1];
					}
				}
			}
			else
			{
				for (int i = 0; i < num; i++)
				{
					if(j < num * 2 - 1 - i)
					{
						lattice[i][j] = lattice[i][j - 1] + lattice[i + 1][j - 1];
					}
				}
			}
		}
		DecimalFormat fmt = new DecimalFormat(":00000");
		for (int i = 0; i < num; i++)
		{
			for (int j = 0; j < num * 2 - 1; j++)
			{
				System.out.print(fmt.format(lattice[i][j]));
			}
			System.out.println();
		}
		System.out.println(lattice[0][num * 2 - 2]);
	}
}

