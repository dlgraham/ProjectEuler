//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

//Let us list the factors of the first seven triangle numbers:

// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.

//What is the value of the first triangle number to have over five hundred divisors?


public class TriangleNumberDivisors
{
	public static void main(String[] args)
	{
		long triangleNumber = 0L;
		int triangleCount = 1;
		int factorsCount = 1;
		long tempTriangle = triangleNumber;
		//increment until a factor count of more than 500 is found
		while(factorsCount < 501)
		{
		  //reset factor count to 1
			factorsCount = 1;
			//add the triangle count to the triangle number to get the next triangle number
			triangleNumber += triangleCount;
			tempTriangle = triangleNumber;
			
			while (tempTriangle > 1)
			{
				for (int i = 2; i <= tempTriangle; i++)
				{
				  //if the tempoerary triangle number is divisible by a prime, remove prime from number as many times as possible and increment count by 1
					if (isPrime(i) && tempTriangle % i == 0)
					{
						int factorsOf = 1;
						tempTriangle /= i;
						while(tempTriangle % i == 0)
						{
							tempTriangle /= i;
							factorsOf++;
						}
						factorsCount *= factorsOf + 1;
					}
				}
			}
				
				
			
			triangleCount++;
		}
		System.out.println(triangleNumber + " is the first triangle number that has " + factorsCount + " factors.");
	}
	//modified isPrime from http://stackoverflow.com/questions/20798391/java-isprime-function - user Tareq Salaheldeen
	private static boolean isPrime(int num)
	{
		if (num == 1)
			return false;
		if (num == 2)
			return true;
		if (num % 2 == 0)
			return false;
		for (int i = 3; i * i <= num; i += 2)
			if (num % i == 0)
				return false;
		return true;
	}
}
